generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  provider           String
  providerAccountId  String
  refreshToken       String? @db.VarChar(500)
  accessToken        String? @db.VarChar(500)
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String     @unique
  phone         String?
  password      String
  emailVerified DateTime?
  passedSurvey  Boolean    @default(false)
  consent       Boolean    @default(false)
  role          Role       @default(USER)
  accounts      Account[]
  sessions      Session[]
  responses     Response[]
  schools       Json       @default("{}")
}

model Response {
  id String @id @default(cuid())

  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  Option   Option @relation(fields: [optionId], references: [id])
  optionId String
}

model SurveyQuestion {
  id      Int      @id @default(autoincrement())
  prompt  String
  options Option[]

  @@unique([id, prompt])
}

model Option {
  id         String         @id @default(cuid())
  text       String
  score      Philosophy
  questionId Int
  question   SurveyQuestion @relation(fields: [questionId], references: [id])
  Response   Response[]

  @@index([questionId])
}

enum Role {
  ADMIN
  USER
}

enum Philosophy {
  CARE_ETHICS
  DEONTOLOGY
  UTILITARIANISM
  VIRTUE_ETHICS
}
